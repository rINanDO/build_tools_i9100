From 06977cbf33a1ce8713de92dc0fc2d97073c1fc12 Mon Sep 17 00:00:00 2001
From: AdrianDC <radian.dc@gmail.com>
Date: Wed, 18 Nov 2015 19:15:29 +0100
Subject: [PATCH 1/4] MountService: Prevent NPE with DropBoxManager

 * "java.lang.NullPointerException: Attempt to invoke virtual
    method 'void android.os.DropBoxManager.addText(java.lang.String,
    java.lang.String)' on a null object reference"

Change-Id: I418ba99caa4f55b184fabee4ad610ca3e5e7c66f
Signed-off-by: AdrianDC <radian.dc@gmail.com>
---
 services/core/java/com/android/server/MountService.java | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/services/core/java/com/android/server/MountService.java b/services/core/java/com/android/server/MountService.java
index 5e67414..7869202 100644
--- a/services/core/java/com/android/server/MountService.java
+++ b/services/core/java/com/android/server/MountService.java
@@ -1093,8 +1093,10 @@ class MountService extends IMountService.Stub
                 final long destroy = Long.parseLong(cooked[6]);
 
                 final DropBoxManager dropBox = mContext.getSystemService(DropBoxManager.class);
-                dropBox.addText(TAG_STORAGE_BENCHMARK, scrubPath(path)
-                        + " " + ident + " " + create + " " + run + " " + destroy);
+                if (dropBox != null) {
+                    dropBox.addText(TAG_STORAGE_BENCHMARK, scrubPath(path)
+                            + " " + ident + " " + create + " " + run + " " + destroy);
+                }
 
                 final VolumeRecord rec = findRecordForPath(path);
                 if (rec != null) {
@@ -1111,8 +1113,10 @@ class MountService extends IMountService.Stub
                 final long time = Long.parseLong(cooked[3]);
 
                 final DropBoxManager dropBox = mContext.getSystemService(DropBoxManager.class);
-                dropBox.addText(TAG_STORAGE_TRIM, scrubPath(path)
-                        + " " + bytes + " " + time);
+                if (dropBox != null) {
+                    dropBox.addText(TAG_STORAGE_TRIM, scrubPath(path)
+                            + " " + bytes + " " + time);
+                }
 
                 final VolumeRecord rec = findRecordForPath(path);
                 if (rec != null) {
-- 
2.7.4


From 3f787492fe4d890455e0034033f3844ba9838ca0 Mon Sep 17 00:00:00 2001
From: Preeti Ahuja <preetia@codeaurora.org>
Date: Thu, 21 Aug 2014 16:30:24 -0700
Subject: [PATCH 2/4] SEEK: Following changes have been made for SEEK:

1. Add support for getAtr api.
   Implement getAtr() for SEEK on Android.

2. Add Multi Sim support for SEEK.

   MSim support for the following apis has been added:

   1. iccOpenLogicalChannel
   2. iccCloseLogicalChannel
   3. iccTransmitApduLogicalChannel
   4. iccTransmitApduBasicChannel
   5. iccExchangeSimIO
   6. getAtr

CRs-Fixed: 718469
Change-Id: If03cbd4f3b108b77ba7998a605776c8626290cee
---
 .../com/android/internal/telephony/ITelephony.aidl | 94 ++++++++++++++++++++++
 .../android/internal/telephony/RILConstants.java   |  3 +-
 2 files changed, 96 insertions(+), 1 deletion(-)

diff --git a/telephony/java/com/android/internal/telephony/ITelephony.aidl b/telephony/java/com/android/internal/telephony/ITelephony.aidl
index dcece26..02ae698 100644
--- a/telephony/java/com/android/internal/telephony/ITelephony.aidl
+++ b/telephony/java/com/android/internal/telephony/ITelephony.aidl
@@ -547,6 +547,18 @@ interface ITelephony {
      */
     IccOpenLogicalChannelResponse iccOpenLogicalChannel(String AID);
 
+
+    /**
+     * Opens a logical channel to the ICC card for a particular subId.
+     *
+     * Input parameters equivalent to TS 27.007 AT+CCHO command.
+     *
+     * @param subId user preferred subId.
+     * @param AID Application id. See ETSI 102.221 and 101.220.
+     * @return an IccOpenLogicalChannelResponse object.
+     */
+    IccOpenLogicalChannelResponse iccOpenLogicalChannelUsingSubId(int subId, String AID);
+
     /**
      * Closes a previously opened logical channel to the ICC card.
      *
@@ -559,6 +571,19 @@ interface ITelephony {
     boolean iccCloseLogicalChannel(int channel);
 
     /**
+     * Closes a previously opened logical channel to the ICC card for a
+     * particular subId.
+     *
+     * Input parameters equivalent to TS 27.007 AT+CCHC command.
+     *
+     * @param subId user preferred subId.
+     * @param channel is the channel id to be closed as retruned by a
+     *            successful iccOpenLogicalChannel.
+     * @return true if the channel was closed successfully.
+     */
+    boolean iccCloseLogicalChannelUsingSubId(int subId, int channel);
+
+    /**
      * Transmit an APDU to the ICC card over a logical channel.
      *
      * Input parameters equivalent to TS 27.007 AT+CGLA command.
@@ -579,6 +604,28 @@ interface ITelephony {
             int p1, int p2, int p3, String data);
 
     /**
+     * Transmit an APDU to the ICC card over a logical channel for a
+     * particular subId.
+     *
+     * Input parameters equivalent to TS 27.007 AT+CGLA command.
+     *
+     * @param subId user preferred subId.
+     * @param channel is the channel id to be closed as retruned by a
+     *            successful iccOpenLogicalChannel.
+     * @param cla Class of the APDU command.
+     * @param instruction Instruction of the APDU command.
+     * @param p1 P1 value of the APDU command.
+     * @param p2 P2 value of the APDU command.
+     * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
+     *            is sent to the SIM.
+     * @param data Data to be sent with the APDU.
+     * @return The APDU response from the ICC card with the status appended at
+     *            the end.
+     */
+    String iccTransmitApduLogicalChannelUsingSubId(int subId, int channel, int cla,
+            int instruction, int p1, int p2, int p3, String data);
+
+    /**
      * Transmit an APDU to the ICC card over the basic channel.
      *
      * Input parameters equivalent to TS 27.007 AT+CSIM command.
@@ -597,6 +644,26 @@ interface ITelephony {
             int p1, int p2, int p3, String data);
 
     /**
+     * Transmit an APDU to the ICC card over the basic channel for a particular
+     * subId.
+     *
+     * Input parameters equivalent to TS 27.007 AT+CSIM command.
+     *
+     * @param subId user preferred subId.
+     * @param cla Class of the APDU command.
+     * @param instruction Instruction of the APDU command.
+     * @param p1 P1 value of the APDU command.
+     * @param p2 P2 value of the APDU command.
+     * @param p3 P3 value of the APDU command. If p3 is negative a 4 byte APDU
+     *            is sent to the SIM.
+     * @param data Data to be sent with the APDU.
+     * @return The APDU response from the ICC card with the status appended at
+     *            the end.
+     */
+    String iccTransmitApduBasicChannelUsingSubId(int subId, int cla, int instruction,
+            int p1, int p2, int p3, String data);
+
+    /**
      * Returns the response APDU for a command APDU sent through SIM_IO.
      *
      * @param fileID
@@ -611,6 +678,22 @@ interface ITelephony {
             String filePath);
 
     /**
+     * Returns the response APDU for a command APDU sent through SIM_IO
+     * for a particular subId.
+     *
+     * @param subId user preferred subId.
+     * @param fileID
+     * @param command
+     * @param p1 P1 value of the APDU command.
+     * @param p2 P2 value of the APDU command.
+     * @param p3 P3 value of the APDU command.
+     * @param filePath
+     * @return The APDU response.
+     */
+    byte[] iccExchangeSimIOUsingSubId(int subId, int fileID, int command, int p1, int p2,
+            int p3, String filePath);
+
+    /**
      * Send ENVELOPE to the SIM and returns the response.
      *
      * @param contents  String containing SAT/USAT response in hexadecimal
@@ -1005,4 +1088,15 @@ interface ITelephony {
      * Return the modem activity info.
      */
     ModemActivityInfo getModemActivityInfo();
+
+    /**
+     * Get ATR (Answer To Reset; as per ISO/IEC 7816-4) from SIM card
+     */
+    byte[] getAtr();
+
+    /**
+     * Get ATR (Answer To Reset; as per ISO/IEC 7816-4) from SIM card
+     * for a particular subId.
+     */
+    byte[] getAtrUsingSubId(int subId);
 }
diff --git a/telephony/java/com/android/internal/telephony/RILConstants.java b/telephony/java/com/android/internal/telephony/RILConstants.java
index 2bd4497..af79ff8 100644
--- a/telephony/java/com/android/internal/telephony/RILConstants.java
+++ b/telephony/java/com/android/internal/telephony/RILConstants.java
@@ -77,7 +77,7 @@ public interface RILConstants {
     int SIM_SAP_MSG_SIZE_TOO_SMALL = 34;
     int SIM_SAP_CONNECT_OK_CALL_ONGOING = 35;
     int LCE_NOT_SUPPORTED = 36;               /* Link Capacity Estimation (LCE) not supported */
-
+    int INVALID_PARAMETER = 37;
 
     /* NETWORK_MODE_* See ril.h RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE */
     int NETWORK_MODE_WCDMA_PREF     = 0; /* GSM/WCDMA (WCDMA preferred) */
@@ -334,6 +334,7 @@ cat include/telephony/ril.h | \
     int RIL_REQUEST_STOP_LCE = 133;
     int RIL_REQUEST_PULL_LCEDATA = 134;
     int RIL_REQUEST_GET_ACTIVITY_INFO = 135;
+    int RIL_REQUEST_SIM_GET_ATR = 136;
 
     int RIL_UNSOL_RESPONSE_BASE = 1000;
     int RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED = 1000;
-- 
2.7.4


From c139a3a43d03e168169614de33fd2ad1c65c5957 Mon Sep 17 00:00:00 2001
From: xplodwild <me@xplod.fr>
Date: Fri, 15 Nov 2013 17:45:40 +0100
Subject: [PATCH 3/4] [3/3] AudioEffect: Add a stereo widener effect

Change-Id: Iab2035c5601394b060e7e77e85ad85aca6e4c89f
---
 media/java/android/media/audiofx/AudioEffect.java |   5 +
 media/java/android/media/audiofx/StereoWide.java  | 280 ++++++++++++++++++++++
 2 files changed, 285 insertions(+)
 create mode 100644 media/java/android/media/audiofx/StereoWide.java

diff --git a/media/java/android/media/audiofx/AudioEffect.java b/media/java/android/media/audiofx/AudioEffect.java
index b94a7e6..20e4b62 100644
--- a/media/java/android/media/audiofx/AudioEffect.java
+++ b/media/java/android/media/audiofx/AudioEffect.java
@@ -97,6 +97,11 @@ public class AudioEffect {
      */
     public static final UUID EFFECT_TYPE_VIRTUALIZER = UUID
             .fromString("37cc2c00-dddd-11db-8577-0002a5d5c51b");
+    /**
+     * UUID for stereowide effect
+     */
+    public static final UUID EFFECT_TYPE_STEREOWIDE = UUID
+            .fromString("37cc2c00-dddd-11db-8577-0002a5d5c51c");
 
     /**
      * UUIDs for effect types not covered by OpenSL ES.
diff --git a/media/java/android/media/audiofx/StereoWide.java b/media/java/android/media/audiofx/StereoWide.java
new file mode 100644
index 0000000..25f8ef5
--- /dev/null
+++ b/media/java/android/media/audiofx/StereoWide.java
@@ -0,0 +1,280 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ * Modifications Copyright (C) The OmniROM Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.media.audiofx;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.media.audiofx.AudioEffect;
+import android.os.Bundle;
+import android.util.Log;
+
+import java.nio.ByteOrder;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.util.StringTokenizer;
+
+
+/**
+ */
+
+public class StereoWide extends AudioEffect {
+
+    private final static String TAG = "StereoWide";
+
+    /**
+     * Is strength parameter supported by stereowide engine. Parameter ID for getParameter().
+     */
+    public static final int PARAM_STRENGTH_SUPPORTED = 0;
+    /**
+     * Stereo widener effect strength. Parameter ID for
+     * {@link android.media.audiofx.StereoWide.OnParameterChangeListener}
+     */
+    public static final int PARAM_STRENGTH = 1;
+
+    /**
+     * Indicates if strength parameter is supported by the stereowide engine
+     */
+    private boolean mStrengthSupported = false;
+
+    /**
+     * Registered listener for parameter changes.
+     */
+    private OnParameterChangeListener mParamListener = null;
+
+    /**
+     * Listener used internally to to receive raw parameter change event from AudioEffect super class
+     */
+    private BaseParameterListener mBaseParamListener = null;
+
+    /**
+     * Lock for access to mParamListener
+     */
+    private final Object mParamListenerLock = new Object();
+
+    /**
+     * Class constructor.
+     * @param priority the priority level requested by the application for controlling the StereoWide
+     * engine. As the same engine can be shared by several applications, this parameter indicates
+     * how much the requesting application needs control of effect parameters. The normal priority
+     * is 0, above normal is a positive number, below normal a negative number.
+     * @param audioSession  system wide unique audio session identifier. The StereoWide will
+     * be attached to the MediaPlayer or AudioTrack in the same audio session.
+     *
+     * @throws java.lang.IllegalStateException
+     * @throws java.lang.IllegalArgumentException
+     * @throws java.lang.UnsupportedOperationException
+     * @throws java.lang.RuntimeException
+     */
+    public StereoWide(int priority, int audioSession)
+    throws IllegalStateException, IllegalArgumentException,
+           UnsupportedOperationException, RuntimeException {
+        super(EFFECT_TYPE_STEREOWIDE, EFFECT_TYPE_NULL, priority, audioSession);
+
+        if (audioSession == 0) {
+            Log.w(TAG, "WARNING: attaching a StereoWide to global output mix is deprecated!");
+        }
+
+        int[] value = new int[1];
+        checkStatus(getParameter(PARAM_STRENGTH_SUPPORTED, value));
+        mStrengthSupported = (value[0] != 0);
+    }
+
+    /**
+     * Indicates whether setting strength is supported. If this method returns false, only one
+     * strength is supported and the setStrength() method always rounds to that value.
+     * @return true is strength parameter is supported, false otherwise
+     */
+    public boolean getStrengthSupported() {
+       return mStrengthSupported;
+    }
+
+    /**
+     * Sets the strength of the stereomode effect. If the implementation does not support per mille
+     * accuracy for setting the strength, it is allowed to round the given strength to the nearest
+     * supported value. You can use the {@link #getRoundedStrength()} method to query the
+     * (possibly rounded) value that was actually set.
+     * @param strength strength of the effect. The valid range for strength strength is [0, 1000],
+     * where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public void setStrength(short strength)
+    throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException {
+        checkStatus(setParameter(PARAM_STRENGTH, strength));
+    }
+
+    /**
+     * Gets the current strength of the effect.
+     * @return the strength of the effect. The valid range for strength is [0, 1000], where 0 per
+     * mille designates the mildest effect and 1000 per mille the strongest
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public short getRoundedStrength()
+    throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException {
+        short[] value = new short[1];
+        checkStatus(getParameter(PARAM_STRENGTH, value));
+        return value[0];
+    }
+
+    /**
+     * The OnParameterChangeListener interface defines a method called by the StereoWide when a
+     * parameter value has changed.
+     */
+    public interface OnParameterChangeListener  {
+        /**
+         * Method called when a parameter value has changed. The method is called only if the
+         * parameter was changed by another application having the control of the same
+         * StereoWide engine.
+         * @param effect the StereoWide on which the interface is registered.
+         * @param status status of the set parameter operation.
+         * @param param ID of the modified parameter. See {@link #PARAM_STRENGTH} ...
+         * @param value the new parameter value.
+         */
+        void onParameterChange(StereoWide effect, int status, int param, short value);
+    }
+
+    /**
+     * Listener used internally to receive unformatted parameter change events from AudioEffect
+     * super class.
+     */
+    private class BaseParameterListener implements AudioEffect.OnParameterChangeListener {
+        private BaseParameterListener() {
+
+        }
+        public void onParameterChange(AudioEffect effect, int status, byte[] param, byte[] value) {
+            OnParameterChangeListener l = null;
+
+            synchronized (mParamListenerLock) {
+                if (mParamListener != null) {
+                    l = mParamListener;
+                }
+            }
+            if (l != null) {
+                int p = -1;
+                short v = -1;
+
+                if (param.length == 4) {
+                    p = byteArrayToInt(param, 0);
+                }
+                if (value.length == 2) {
+                    v = byteArrayToShort(value, 0);
+                }
+                if (p != -1 && v != -1) {
+                    l.onParameterChange(StereoWide.this, status, p, v);
+                }
+            }
+        }
+    }
+
+    /**
+     * Registers an OnParameterChangeListener interface.
+     * @param listener OnParameterChangeListener interface registered
+     */
+    public void setParameterListener(OnParameterChangeListener listener) {
+        synchronized (mParamListenerLock) {
+            if (mParamListener == null) {
+                mParamListener = listener;
+                mBaseParamListener = new BaseParameterListener();
+                super.setParameterListener(mBaseParamListener);
+            }
+        }
+    }
+
+    /**
+     * The Settings class regroups all StereoWide parameters. It is used in
+     * conjuntion with getProperties() and setProperties() methods to backup and restore
+     * all parameters in a single call.
+     */
+    public static class Settings {
+        public short strength;
+
+        public Settings() {
+        }
+
+        /**
+         * Settings class constructor from a key=value; pairs formatted string. The string is
+         * typically returned by Settings.toString() method.
+         * @throws IllegalArgumentException if the string is not correctly formatted.
+         */
+        public Settings(String settings) {
+            StringTokenizer st = new StringTokenizer(settings, "=;");
+            int tokens = st.countTokens();
+            if (st.countTokens() != 3) {
+                throw new IllegalArgumentException("settings: " + settings);
+            }
+            String key = st.nextToken();
+            if (!key.equals("StereoWide")) {
+                throw new IllegalArgumentException(
+                        "invalid settings for StereoWide: " + key);
+            }
+            try {
+                key = st.nextToken();
+                if (!key.equals("strength")) {
+                    throw new IllegalArgumentException("invalid key name: " + key);
+                }
+                strength = Short.parseShort(st.nextToken());
+             } catch (NumberFormatException nfe) {
+                throw new IllegalArgumentException("invalid value for key: " + key);
+            }
+        }
+
+        @Override
+        public String toString() {
+            String str = new String (
+                    "StereoWide"+
+                    ";strength="+Short.toString(strength)
+                    );
+            return str;
+        }
+    };
+
+
+    /**
+     * Gets the stereowide properties. This method is useful when a snapshot of current
+     * stereowide settings must be saved by the application.
+     * @return a StereoWide.Settings object containing all current parameters values
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public StereoWide.Settings getProperties()
+    throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException {
+        Settings settings = new Settings();
+        short[] value = new short[1];
+        checkStatus(getParameter(PARAM_STRENGTH, value));
+        settings.strength = value[0];
+        return settings;
+    }
+
+    /**
+     * Sets the stereowide properties. This method is useful when stereowide settings have to
+     * be applied from a previous backup.
+     * @param settings a StereoWide.Settings object containing the properties to apply
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public void setProperties(StereoWide.Settings settings)
+    throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException {
+        checkStatus(setParameter(PARAM_STRENGTH, settings.strength));
+    }
+}
-- 
2.7.4


From 7d0f8b2c17bda8917acfe5f5d8b72e0bfffd5e9e Mon Sep 17 00:00:00 2001
From: xplodwild <me@xplod.fr>
Date: Fri, 15 Nov 2013 11:09:11 +0100
Subject: [PATCH 4/4] [3/3] AudioFX: Add center frequency param to bassboost

Change-Id: I38bd4f0080495d8e830efefc03cb9a716fd7f67c
---
 media/java/android/media/audiofx/BassBoost.java | 31 ++++++++++++++++++++++++-
 1 file changed, 30 insertions(+), 1 deletion(-)

diff --git a/media/java/android/media/audiofx/BassBoost.java b/media/java/android/media/audiofx/BassBoost.java
index a46cc22..d222a99 100644
--- a/media/java/android/media/audiofx/BassBoost.java
+++ b/media/java/android/media/audiofx/BassBoost.java
@@ -53,7 +53,11 @@ public class BassBoost extends AudioEffect {
      * {@link android.media.audiofx.BassBoost.OnParameterChangeListener}
      */
     public static final int PARAM_STRENGTH = 1;
-
+    /**
+     * Bass boost center frequency. Paremeter ID for
+     * {@link android.media.audiofx.BassBoost.OnParameterChangeListener}
+     */
+    public static final int PARAM_CENTER_FREQUENCY = 2;
     /**
      * Indicates if strength parameter is supported by the bass boost engine
      */
@@ -143,6 +147,31 @@ public class BassBoost extends AudioEffect {
     }
 
     /**
+     * Sets the center frequency of the bass boost effect.
+     * @param freq The frequency, in Hz. The valid range for the freq is [20,500]
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public void setCenterFrequency(short freq)
+    throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException {
+        checkStatus(setParameter(PARAM_CENTER_FREQUENCY, freq));
+    }
+
+    /**
+     * Gets the current center frequency of the effect
+     * @return the center frequency of the effect. The valid range is [20,500], in Hertz
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @throws UnsupportedOperationException
+     */
+    public short getCenterFrequency() {
+        short[] value = new short[1];
+        checkStatus(getParameter(PARAM_CENTER_FREQUENCY, value));
+        return value[0];
+    }
+
+    /**
      * The OnParameterChangeListener interface defines a method called by the BassBoost when a
      * parameter value has changed.
      */
-- 
2.7.4

